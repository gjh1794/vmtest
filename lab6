Fork:
#include<unistd.h>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int main() {
	while(1) {
		char input[256];
		char cypher[256];
		char xor = 'g';
		printf(">>");
		fgets(input, 256, stdin);
		char esc[] = "exit\n";
		if(strcmp(input, esc) == 0) {
			break;
		}
		//printf("I'm parent.\n");
		for(int z = 0; z < 256; z++) {
			if(input[z] == '\0') {
				cypher[z] = '\0';
				break;
			}
			char cypchar = input[z] ^ xor;
			cypher[z] = cypchar;
		}
		pid_t pid = fork();
		if(pid < 0) {
			printf("fork failed.\n");
			exit(1);
		}
		else if(pid == 0) {
			//in child process
			char* argvec[] = {"./filewrite", cypher, NULL};
			if(execvp(argvec[0], argvec) < 0) {
				printf("Exec Fails.\n");
				exit(1);
			}
			printf("end of exec.\n");
		}
		wait(NULL);
		printf("Parent process is doing something here.\n");
	}
	return 0;
}

Filewrite:
#include<stdio.h>
#include<unistd.h>

int main(int argc, char* argv[]) {
	//TODO XOR cipher
	char xor = 'g';
	char* cypher = argv[1];
	char pt[256];
	for(int z = 0; z < 256; z++) {
		if(cypher[z] == '\0') {
			break;
		}
		char ptchar = cypher[z] ^ xor;
		pt[z] = ptchar;
	}
	FILE* fp = fopen("plaintext.txt", "w+");
	fprintf(fp, "Unencrypted plaintext: %s\n", pt);
	fprintf(fp, "End of message\n");
	fclose(fp);
	return 0;
}
